closures don't use external parameter labels.

Remeber: If the function MUST accept exactly x parameters, and the output is exactely the said type
you can omit the variable names in the parameter field, 
you can also remove the parameters, the 'in' and the by fields to simplift it
you can simplify the parameter names using one thing called shorthand parameter

let captainFirstTeam = team.sorted(by: { (name1: String, name2: String) -> Bool in
    if name1 == "Suzanne" {
        return true
    } else if name2 == "Suzanne" {
        return false
    }
    
    return name1 < name2
});

print(captainFirstTeam)

// How to use trailing closures and shorthand syntax

let captainFirstTeamNew = team.sorted {
    if $0 == "Suzanne" {
        return true
    } else if $1 == "Suzanne" {
        return false
    }
    return $0 < $1
};

print(captainFirstTeamNew)

Summary
- When you create a list of data on the screen, SwiftUI will ask you to provide-  a function that accepts one item from the list and converts it something it can display on-screen.
- When you create a button, SwiftUI will ask you to provide one function to execute when the button is pressed, and another to generate the contents of the button – a picture, or some text, and so on.
- Even just putting stacking pieces of text vertically is done using a closure.

Day summary
- You can copy functions in Swift, and they work the same as the original except they lose their external parameter names.
- All functions have types, just like other data types. This includes the parameters they receive along with their return type, which might be Void – also known as “nothing”.
- You can create closures directly by assigning to a constant or variable.
- Closures that accept parameters or return a value must declare this inside their braces, followed by the keyword in.
- Functions are able to accept other functions as parameters. They must declare up front exactly what data those functions must use, and Swift will ensure the rules are followed.
- In this situation, instead of passing a dedicated function you can also pass a closure – you can make one directly. Swift allows both approaches to work.
- When passing a closure as a function parameter, you don’t need to explicitly write out the types inside your closure if Swift can figure it out automatically. The same is true for the return value – if Swift can figure it out, you don’t need to specify it.
- If one or more of a function’s final parameters are functions, you can use trailing closure syntax.
- You can also use shorthand parameter names such as $0 and $1, but I would recommend doing that only under some conditions.
- You can make your own functions that accept functions as parameters, although in practice it’s much more important to know how to use them than how to create them.